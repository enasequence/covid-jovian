#!/bin/bash
############################################################################################################
### Authors:                                                                                             ###
###     Dennis Schmitz, Sam Nooij, Florian Zwagemaker, Robert Verhagen,                                  ###
###     Jeroen Cremer, Thierry Janssens, Mark Kroon, Erwin van Wieringen,                                ###
###     Annelies Kroneman, Harry Vennema, Marion Koopmans                                                ###
### Organization:                                                                                        ###
###     Rijksinstituut voor Volksgezondheid en Milieu (RIVM)                                             ###
###     Dutch Public Health institute (https://www.rivm.nl/en)                                           ###
### Department:                                                                                          ###
###     Virology - Emerging and Endemic Viruses (EEV)                                                    ###
###     Virology - Viruses of the Vaccination Program (VVP)                                              ###
###     Bacteriology - Bacterial and Parasitic Diagnostics (BPD)                                         ###
### Date and license:                                                                                    ###
###     23-08-2018, AGPL3 license                                                                        ###
### Homepage containing documentation, examples and a changelog:                                         ###
###     https://github.com/DennisSchmitz/Jovian                                                          ###
### Funding:                                                                                             ###
###     This project/research has received funding from the European Unionâ€™s                             ###
###     Horizon 2020 research and innovation programme under grant agreement                             ###
###     No. 643476. and the Dutch working group on molecular diagnostics (WMDI).                         ###
### Automation:                                                                                          ###
###    iRODS automatically executes this workflow for all "vir-ngs" labelled                             ###
###    Illumina sequencing runs. See the internal Gitlab repo for the wrapper                            ###
###    with additional information.                                                                      ###
############################################################################################################

# shellcheck disable=SC1091
#set -euo pipefail
#set -v
#set -x

#@ # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#@ load in standard vars

set -o allexport
[[ -f .env ]] && source .env
source bin/includes/functions
eval "$(parse_yaml config/pipeline_parameters.yaml "params_")"
eval "$(parse_yaml config/config.yaml "configuration_")"
set +o allexport

#@ # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#@ Parse the jovian commandline arguments.
#@ If the given arguments are not part of Jovian, then Jovian will send them to Snakemake
#@ # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

POSITIONAL=()
while [[ $# -gt 0 ]]
do
    key="$1"
    case $key in
        -i|--input)
        INPUT_DIR="$2"
        export INPUT_DIR
        shift # Next
        shift # Next
        ;;
        -m|--mode)
        JOVIAN_MODE="$2"
        export JOVIAN_MODE
        shift # Next
        shift # Next
        ;;
        -h|--help)
        JOVIAN_HELP="TRUE"
        export JOVIAN_HELP
        shift # Next
        ;;
        -sh|--snakemake-help)
        SNAKEMAKE_HELP="TRUE"
        export SNAKEMAKE_HELP
        shift # Next
        ;;
        -ic|--install-dependencies)
        INSTALL_CONDA_ENVS="TRUE"
        export INSTALL_CONDA_ENVS
        shift # Next
        ;;
        -id|--install-databases)
        INSTALL_DB="TRUE"
        export INSTALL_DB
        shift # Next
        ;;
        --clean)
        CLEAN="TRUE"
        export CLEAN
        shift # Next
        ;;
        --archive)
        ARCHIVE="TRUE"
        export ARCHIVE
        shift # Next
        ;;
        -v|--version)
        SHOW_VERSION="TRUE"
        export SHOW_VERSION
        shift # Next
        ;;
        --start-nginx)
        START_NGINX="TRUE"
        export START_NGINX
        shift # Next
        ;;
        --stop-nginx)
        STOP_NGINX="TRUE"
        export STOP_NGINX
        shift # Next
        ;;
        --rebuild-archive)
        REBUILD_ARCHIVE="TRUE"
        export REBUILD_ARCHIVE
        shift # Next
        ;;
        --configure-jupyter)
        CONFIG_JUP="TRUE"
        export CONFIG_JUP
        shift # Next
        ;;
        --start-jupyter)
        START_JUPYTER="TRUE"
        export START_JUPYTER
        shift # Next
        ;;
        -vt|--virus-typing)
        VIRUS_TYPING="TRUE"
        WHICH_TT="$2"
        export VIRUS_TYPING
        export WHICH_TT
        shift # Next
        shift # Next
        ;;
        -vt-force|--virus-typing-force)
        VIRUS_TYPING="TRUE"
        FORCE_OVERWRITE_TT="TRUE"
        WHICH_TT="$2"
        export VIRUS_TYPING
        export FORCE_OVERWRITE_TT
        export WHICH_TT
        shift # Next
        shift # Next
        ;;
        -vt-help|--virus-typing-help)
        VIRUS_TYPING="TRUE"
        VIRUS_TYPING_HELP="TRUE"
        export VIRUS_TYPING
        export VIRUS_TYPING_HELP
        shift # Next
        ;;
        --make-sample-sheet)
        MAKE_SAMPLE_SHEET="TRUE"
        export MAKE_SAMPLE_SHEET
        shift # Next
        ;;
        -y)
        SKIP_CONFIRMATION="TRUE"
        export SKIP_CONFIRMATION
        shift # Next
        ;;
        -u|--unlock)
        SNAKEMAKE_UNLOCK="TRUE"
        export SNAKEMAKE_UNLOCK
        shift # Next
        ;;
        --update)
        JOVIAN_UPDATE="TRUE"
        CHANGE_VERSION="$2"
        export JOVIAN_UPDATE
        export CHANGE_VERSION
        shift # Next
        shift # Next
        ;;
        -cq|--cluster-queue)
        QUEUE_NAME_OVERRIDE="TRUE"
        QUEUE_NAME_REPLACEMENT="$2"
        export QUEUE_NAME_OVERRIDE
        export QUEUE_NAME_REPLACEMENT
        shift # Next
        shift # Next
        ;;
        -ra|--reference-alignment)
        REFERENCE_ALIGNMENT="TRUE"
        REFERENCE_FASTA="$2"
        export REFERENCE_ALIGNMENT
        export REFERENCE_FASTA
        shift # Next
        shift # Next
        ;;
        *) # Any other option
        POSITIONAL+=("$1") # save in array
        shift # Next
        ;;
    esac
done
set -- "${POSITIONAL[@]:-}" #> Restores the positional arguments 
                            #> (i.e. without the case arguments above) which then can be called via `$@` or `$[0-9]` etc.
                            #> These parameters are send to Snakemake.



#@ # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#@ 
#@ First basic arguments that do not require Jovian to be installed
#@
#@ # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #




###> Show Jovian version
if [ "${SHOW_VERSION}" == "TRUE" ]; then
    bash bin/includes/Version
    exit 0
fi

###> Remove all Jovian output
if [ "${CLEAN:-}" == "TRUE" ]; then
    bash bin/includes/Clean
    exit 0
fi

###> Print Jovian help message
if [ "${JOVIAN_HELP:-}" == "TRUE" ]; then
    bash bin/includes/help
    exit 0
fi

#@ # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#@ 
#@ Jovian Installation block
#@
#@ # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

###> Pre-flight check: Assess availability of required files, conda and Jovian_master environment
if ! bash bin/includes/Pre_install_checker; then
    exit 1
fi

###> Installer for miniconda.
###> Runs if the command "conda" is not recognised by the host AND if the "~/UserBinaries/Miniconda3" path is non-existant
if ! bash bin/includes/Install_miniconda; then
    exit 1
fi


set -o allexport
source "${HOME}"/.jovianrc
set +o allexport

###> Installer for Jovian_master environment.
###> Runs if the master environment is not active (in path) and is not installed either. Activates environment on finish
if ! bash bin/includes/Install_jovian-master; then
    exit 1
else
    set -o allexport
    conda activate "${MASTER_NAME}"
    set +o allexport
    echo -e "Successfully activated Jovian_master environment"
fi


###> Install databases, as specified via CLI argument '-id'
if [ "${INSTALL_DB:-}" == "TRUE" ]; then
    bash bin/includes/Databases
    exit 0
fi

###> Fill in the global location of the databases.
bash bin/includes/Userconfig_DB

###> Fill in the global computing-mode configuration
if ! bash bin/includes/Userconfig_CM; then
    exit
fi

#@ # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#@ 
#@ End of Jovian installation.
#@ From this point onwards you can safely assume Conda is installed
#@ The Jovian_master environment is activated for this shell session and all child-shells
#@
#@ # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

###> Change the installed Jovian version to the latest release or to a specified verison
if [ "${JOVIAN_UPDATE}" == "TRUE" ]; then
    if [ -z "${CHANGE_VERSION}" ]; then
        bash bin/includes/selfupdate master
        exit 0
    else
        bash bin/includes/selfupdate "${CHANGE_VERSION}"
        exit
    fi
fi


###> Archiving of relevant data in a single tar.gz file
if [ "${ARCHIVE:-}" == "TRUE" ]; then
    bash bin/includes/Archive
    exit 0
fi

###> Main controller for the virus typing block, as specified via CLI argument '--virus-typing'
if [ "${VIRUS_TYPING:-}" == "TRUE" ]; then
    if [ "${VIRUS_TYPING_HELP:-}" == "TRUE" ]; then
        bash bin/scripts/virus_typing.sh --help
        exit 0
    elif [ "${FORCE_OVERWRITE_TT:-}" == "TRUE" ]; then
        
        # Check if the URL's are accessible (sometimes they are overloaded/down for maintenance/crashed)
        if ! bash bin/includes/Typingtool_check "${WHICH_TT}"; then
            exit 1
        fi

        bash bin/scripts/virus_typing.sh "${WHICH_TT}" --force
        exit 0
    else

        # Check if the URL's are accessible (sometimes they are overloaded/down for maintenance/crashed)
        if ! bash bin/includes/Typingtool_check "${WHICH_TT}"; then
            exit 1
        fi
        
        bash bin/scripts/virus_typing.sh "${WHICH_TT}"
        exit 0
    fi
fi

###> Rebuild archived Jovian results in order to view results and data.
#TODO the syntax below doesn't work if there are multiple archives. should really fix at some point.
if [ "${REBUILD_ARCHIVE}" == "TRUE" ]; then
    if [ -e archive_*.tar.gz ]; then
        bin/includes/Rebuild_archive
    exit 0
    else
        echo -e "There's no Jovian-archive present."
        exit 0
    fi
fi

###> Print Snakemake help
if [ "${SNAKEMAKE_HELP:-}" == "TRUE" ]; then
    line
    snakemake --help
    exit 0
fi

###> Make a .ncbirc file based on the database information in ~/.jovian_installchoice_db
bash bin/includes/Make_ncbirc


###> Installation of Jovian specific conda environments on user request with "bash jovian -ic"
if ! bash bin/includes/Install_conda_envs; then
    exit 0
fi

###> Start and/or stop nginx
if [ "${START_NGINX}" == "TRUE" ]; then
    (bin/includes/Start_nginx start)
    exit 0
fi
if [ "${STOP_NGINX}" == "TRUE" ]; then
    nginx -s quit
    echo "nginx has been stopped"
    exit 0
fi

###> Auto configure the jupyter user profile and prepare it for use without manually configuring it
if [ "${CONFIG_JUP}" == "TRUE" ]; then
    bash bin/includes/Config_jupyter
    exit 0
fi

###> Easy command to start jupyter notebooks
if [ "${START_JUPYTER}" == "TRUE" ]; then
    bash bin/includes/Start_jupyter
    exit 0
fi

###> Detect mode and/or switch mode on request of the user
if ! bash bin/includes/Mode; then
    exit 1
fi

###> Build the sample_sheet.yaml
if ! bash bin/includes/Make_samplesheet; then
    exit 1
fi

#TODO cleanup/remove these failsaves, it's too complicated and probably redundant.

###? Failsafe 1 for the sample sheet
if [ -e sample_sheet.yaml ]; then
    echo "sample sheet exists"
    set -o allexport
    SHEET_SUCCESS="TRUE"
    set +o allexport
fi

###? Failsafe 2 for the sample sheet
if [ "${SHEET_SUCCESS}" == "TRUE" ]; then
    echo -e "Succesfully generated the sample sheet"
else
    echo "Something went wrong with the sample sheet, aborting jovian process..."
    exit 1
fi

###> Make the sample sheet and then quit Jovian for manual running and debugging of the pipeline
if [ "${MAKE_SAMPLE_SHEET}" == "TRUE" ] && [ ! -s config/variables.yaml ]; then #? If config/variables.yaml does not exist or is empty AND manual make sample sheet is TRUE...
    echo -e "Jovian_run:\n    identifier: ${UNIQUE_ID}" > config/variables.yaml
    echo -e "Server_host:\n    hostname: http://${HOSTNAME}" >> config/variables.yaml
    echo -e "The variables file has been created, you can now run the Jovian snakefile manually"
    exit 0
elif [ "${MAKE_SAMPLE_SHEET}" == "TRUE" ] && [ -s config/variables.yaml ]; then
    echo -e "Variable file not generated, it already existed. You are now able to run the Jovian snakefile manually."
    exit 0
fi


###> Unlock snakemake if, for some reason, snakemake was unable to unlock the working directory by itself
if [ "${SNAKEMAKE_UNLOCK}" == "TRUE" ]; then
    printf "\nUnlocking working directory...\n"
    snakemake -s bin/Snakefile --profile "${PROFILE}" --unlock
    printf "\nDone.\n"
    exit 0
fi

#@ # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#@ Last Preflight checkers here.

###> Check databases locations, exit if something is missing
if ! bash bin/includes/Preflight_check_databases; then
    exit 1
fi
###> Check the reads and change pipeline parameters acccordingly
if ! bash bin/includes/Preflight_readlength-counter; then
exit 1
fi

ready_for_start
#@ # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #


###> Here the UNIQUE_ID and HOSTNAME variables are actually set
if [ ! -s config/variables.yaml ]; then #? If config/variables.yaml does not exist or is empty...
    echo -e "Jovian_run:\n    identifier: ${UNIQUE_ID}" > config/variables.yaml
    echo -e "Server_host:\n    hostname: http://${HOSTNAME}" >> config/variables.yaml
    eval $(parse_yaml config/variables.yaml "config_")
else
    eval $(parse_yaml config/variables.yaml "config_")
fi

###> Core Jovian workflow snakemake command with checkers for required files.
if [ ! -s sample_sheet.yaml ]; then #? If sample_sheet.yaml does not exist or is empty...
    echo -e "sample_sheet.yaml could not be found"
    echo -e "This also means that Jovian was unable to generate a new sample sheet for you"
    echo -e "Please inspect the input directory (${INPUT_DIR}) and make sure the right files are present"
    exit 1
elif [ "${REFERENCE_ALIGNMENT}" == "TRUE" -a ! -s "${REFERENCE_FASTA}" ]; then #? If REFERENCE_ALIGNMENT is TRUE and the REFERENCE_ALIGNMENT file exists and is not empty...
    echo -e "The given reference file, ${REFERENCE_FASTA}, does not exist. Please check your input. Exiting..."
    exit 1
elif [ "${REFERENCE_ALIGNMENT}" == "TRUE" ] && ! $( seqkit seq -v -t dna "${REFERENCE_FASTA}" > /dev/null ); then
    echo -e "The given input reference FASTA does not appear to be valid, see the error message above. Exiting..."
    exit 1
elif [ "${REFERENCE_ALIGNMENT}" == "TRUE" ] && (( $( grep -c "^>" "${REFERENCE_FASTA}" ) > 1 )); then #TODO this is a failsafe until the next version, current version only allows single-record FASTA records since it's intended for nCoV first and foremost.
    echo -e "This version of Jovian does not support multi-record FASTA references, only one sequence per FASTA allowed. This feature will come in the next version. Exiting..."
    exit 1
    #TODO remove/update this part in a future version of Jovian which is multi-record FASTA compatible (e.g. segmented viruses or multiple clades of the same species in one record)
elif [ "${REFERENCE_ALIGNMENT}" == "TRUE" ]; then #? If REFERENCE_ALIGNMENT is TRUE, start RA.smk and exit with exit-code 0...
    echo -e "Starting optional reference alignment extension"
    # Starting nginx for IGVjs viz. In core pipeline this is started from report-jup. But since we don't have that for the extension, do it like this:
    echo -e "\nChecking if nginx needs to be activated..."
    (bin/includes/Start_nginx start)
    set +ue #turn off bash strict mode because snakemake and conda don't work in strict mode
    snakemake -s bin/Ref_alignment.smk --profile "${PROFILE}" --config reference="${REFERENCE_FASTA}" ${@} && echo -e "\nUnique identifier for this Jovian run is: $config_Jovian_run_identifier "
    set -ue #turn bash strict mode back on
    exit 0
else #? Else, start jovian_core.smk and do virus typing for all keywords.
    echo -e "Starting core metagenomics workflow"
    set +ue #turn off bash strict mode because snakemake and conda don't work in strict mode
    snakemake -s bin/Snakefile --profile "${PROFILE}" ${@} && echo -e "\nUnique identifier for this Jovian run is: $config_Jovian_run_identifier "
    set -ue #turn bash strict mode back on
fi

exit 0 