#!/bin/bash
# shellcheck disable=SC1091

should_i_archive="no"

if [[ -f config/variables.yaml ]]; then
    eval "$(parse_yaml config/variables.yaml "config_")"
    t="archive_${config_Jovian_run_identifier}_jovian-${VERSION}.tar"
else
    minispacer
    echo -e "The file \"config/variables.yaml\" doesn't exist, this file is necessary for the archiving process"
    echo -e "Quitting because a necessary file is missing..."
    exit 1
fi

line
spacer
spacer
echo -e "Archiving the Jovian data and results can take several hours depending on the size of your dataset(s)."
echo -e "This archiving process will NOT include the raw dataset in the final archive"
minispacer
echo -e "It is advised to run the archiving process overnight, it is strongly advised to not stop the process once you started it"

if [ "${SKIP_CONFIRMATION}" == "TRUE" ]; then
    should_i_archive="yes"
else
    while read -r -p "Do you want to start the Jovian archiving process now? [y/N] " archive_answer
    do
        archive_answer=${archive_answer,,}
        if [[ "${archive_answer}" =~ ^(yes|y)$ ]]; then
            should_i_archive="yes"
            minispacer
            break
        elif [[ "${archive_answer}" =~ ^(no|n)$ ]]; then
            echo -e "Aborting the archiving process on user request"
            exit 0
        else
            echo -e "Please answer with 'yes'' or 'no'"
            minispacer
        fi
    done
fi

if [ "${should_i_archive}" == "no" ]; then
    exit 0
fi


if [ "${should_i_archive}" == "yes" ]; then

    #@ array of "desired" archive contents
    a=(
        "data/"
        "logs/"
        "results/"
        "config/"
        "sample_sheet.yaml"
    )

    #@ find out which "resources" actually exists from the desired archive contents. Add the actually existing resources to a secondary array.
    for b in "${a[@]}"; do
        if [ -e $b ]; then
            echo -e "\"${b}\" exists. \tAdding to list of resources that will be gathered in the archive..."
            c+=("$b")
            sleep 0.2
        else
            echo -e "\"${b}\" Doesn't appear to exists. Skipping this directory during archiving."
        fi
    done

    #@ add the existing resources to the archive
    spacer
    thinline
    for d in "${c[@]}"; do
        start_spinner "Adding \"${d}\" to the archive"
        tar --append --file="${t}" "${d}"
        stop_spinner $?
    done

    #@ compress the newly made archive
    spacer
    thinline
    start_spinner "Compressing the archive..."
    pigz -p "${USE_CORES}" "${t}"
    stop_spinner $?
    
    minispacer
    echo "Done."
fi

exit 0