#!/bin/bash
# shellcheck disable=SC1091


### functions

line() {
    printf "%-70s\n" "#" | sed 's/\s/#/g'
}

thinline() {
    printf "%-70s\n" "-" | sed 's/\s/-/g'
}

spacer() {
    printf "\n\n"
}

minispacer() {
    printf "\n"
}

function _spinner() {
    # $1 start/stop
    #
    # on start: $2 display message
    # on stop : $2 process exit status
    #           $3 spinner function pid (supplied from stop_spinner)

    local on_success="DONE"
    local on_fail="FAIL"
    local white="\e[1;37m"
    local green="\e[1;32m"
    local red="\e[1;31m"
    local nc="\e[0m"

    case $1 in
        start)
            # calculate the column where spinner and status msg will be displayed
            let column=$(tput cols)-${#2}-8
            # display message and position the cursor in $column column
            echo -ne ${2}
            printf "%${column}s"

            # start spinner
            i=1
            sp='\|/-'
            delay=${SPINNER_DELAY:-0.15}

            while :
            do
                printf "\b${sp:i++%${#sp}:1}"
                sleep $delay
            done
            ;;
        stop)
            if [[ -z ${3} ]]; then
                echo "spinner is not running.."
                exit 1
            fi

            kill $3 > /dev/null 2>&1

            # inform the user uppon success or failure
            echo -en "\b["
            if [[ $2 -eq 0 ]]; then
                echo -en "${green}${on_success}${nc}"
            else
                echo -en "${red}${on_fail}${nc}"
            fi
            echo -e "]"
            ;;
        *)
            echo "invalid argument, try {start/stop}"
            exit 1
            ;;
    esac
}

function start_spinner {
    # $1 : msg to display
    _spinner "start" "${1}" &
    # set global spinner pid
    _sp_pid=$!
    disown
}

function stop_spinner {
    # $1 : command exit status
    _spinner "stop" $1 $_sp_pid
    unset _sp_pid
}

installer_intro() {
    tput reset
    line
    echo -e "Welcome to the interactive installation process of Jovian"
    echo -e "You are seeing this because one or multiple dependencies of Jovian are missing on your system."
    echo -e "You are using Jovian $VERSION"
    line
    spacer
}

database_installer_intro () {
    tput reset
    line
    echo -e "Welcome to the interactive database installation process of Jovian"
    echo -e "This process will ask you for the locations where to place the specific databases and will download/install them for you"
    minispacer
    echo -e "\e[1mWe strongly advise you to contact your local system administrators before continuing. \nIf you're inexperienced with the commandline, or linux computers in general, it is best to leave this installation process to your system administrators.\e[0m"
    minispacer
    line
    minispacer
}

database_installer () {
    tput reset
    line
    echo -e "Welcome to the interactive database installation process of Jovian"
    echo -e "This process will ask you for the locations where to place the specific databases and will download/install them for you"
    minispacer
    line
    minispacer
}

ready_for_start() {
    spacer
    line
    echo -e "All pre-flight checks of Jovian have been completed"
    echo -e "You are using Jovian version ${VERSION}"
    line
    spacer
}

parse_yaml() {
   local prefix=$2
   local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')
   sed -ne "s|^\($s\)\($w\)$s:$s\"\(.*\)\"$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  $1 |
   awk -F$fs '{
      indent = length($1)/7;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
         printf("%s%s%s=\"%s\"\n", "'${prefix}'",vn, $2, $3);
      }
   }'
}

database_part() {
    local a=$1
    local n=$2
    local split="\n"
    local b=$(spacer)
    local c=$(thinline)
    local steps="7"
    local d="${split}
    Starting download and installation of the $a database${split}
    The entire procedure of installing all required databases may require several hours, depending onthe download speed and performance of your computer and/or server.${split}
    This is step $n of $steps${split}
    Please stand-by..."
    echo -e "\e[7m"
    echo $b
    echo $c
    echo -e $d
    echo -e "\e[0m"
}